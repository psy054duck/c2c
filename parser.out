Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> recurrence
Rule 1     recurrence -> if_seq
Rule 2     if_seq -> if_statement
Rule 3     if_seq -> if_statement ELSE if_seq
Rule 4     if_seq -> if_statement ELSE LBRACK transitions RBRACK
Rule 5     if_statement -> IF LPAREN cond RPAREN LBRACK transitions RBRACK
Rule 6     cond -> atom_cond
Rule 7     atom_cond -> expr EQ expr
Rule 8     atom_cond -> expr GT expr
Rule 9     atom_cond -> expr LT expr
Rule 10    atom_cond -> expr GE expr
Rule 11    atom_cond -> expr LE expr
Rule 12    transitions -> transition transitions
Rule 13    transitions -> <empty>
Rule 14    transition -> VARIABLE ASSIGN expr SEMI
Rule 15    expr -> factor PLUS expr
Rule 16    expr -> factor MINUS expr
Rule 17    expr -> factor
Rule 18    factor -> factor TIMES operand
Rule 19    factor -> factor DIV operand
Rule 20    factor -> operand
Rule 21    operand -> VARIABLE
Rule 22    operand -> NUMBER

Terminals, with rules where they appear

ASSIGN               : 14
DIV                  : 19
ELSE                 : 3 4
EQ                   : 7
GE                   : 10
GT                   : 8
IF                   : 5
LBRACK               : 4 5
LE                   : 11
LPAREN               : 5
LT                   : 9
MINUS                : 16
NUMBER               : 22
PLUS                 : 15
RBRACK               : 4 5
RPAREN               : 5
SEMI                 : 14
TIMES                : 18
VARIABLE             : 14 21
error                : 

Nonterminals, with rules where they appear

atom_cond            : 6
cond                 : 5
expr                 : 7 7 8 8 9 9 10 10 11 11 14 15 16
factor               : 15 16 17 18 19
if_seq               : 1 3
if_statement         : 2 3 4
operand              : 18 19 20
recurrence           : 0
transition           : 12
transitions          : 4 5 12

Parsing method: LALR

state 0

    (0) S' -> . recurrence
    (1) recurrence -> . if_seq
    (2) if_seq -> . if_statement
    (3) if_seq -> . if_statement ELSE if_seq
    (4) if_seq -> . if_statement ELSE LBRACK transitions RBRACK
    (5) if_statement -> . IF LPAREN cond RPAREN LBRACK transitions RBRACK

    IF              shift and go to state 4

    recurrence                     shift and go to state 1
    if_seq                         shift and go to state 2
    if_statement                   shift and go to state 3

state 1

    (0) S' -> recurrence .



state 2

    (1) recurrence -> if_seq .

    $end            reduce using rule 1 (recurrence -> if_seq .)


state 3

    (2) if_seq -> if_statement .
    (3) if_seq -> if_statement . ELSE if_seq
    (4) if_seq -> if_statement . ELSE LBRACK transitions RBRACK

    $end            reduce using rule 2 (if_seq -> if_statement .)
    ELSE            shift and go to state 5


state 4

    (5) if_statement -> IF . LPAREN cond RPAREN LBRACK transitions RBRACK

    LPAREN          shift and go to state 6


state 5

    (3) if_seq -> if_statement ELSE . if_seq
    (4) if_seq -> if_statement ELSE . LBRACK transitions RBRACK
    (2) if_seq -> . if_statement
    (3) if_seq -> . if_statement ELSE if_seq
    (4) if_seq -> . if_statement ELSE LBRACK transitions RBRACK
    (5) if_statement -> . IF LPAREN cond RPAREN LBRACK transitions RBRACK

    LBRACK          shift and go to state 8
    IF              shift and go to state 4

    if_statement                   shift and go to state 3
    if_seq                         shift and go to state 7

state 6

    (5) if_statement -> IF LPAREN . cond RPAREN LBRACK transitions RBRACK
    (6) cond -> . atom_cond
    (7) atom_cond -> . expr EQ expr
    (8) atom_cond -> . expr GT expr
    (9) atom_cond -> . expr LT expr
    (10) atom_cond -> . expr GE expr
    (11) atom_cond -> . expr LE expr
    (15) expr -> . factor PLUS expr
    (16) expr -> . factor MINUS expr
    (17) expr -> . factor
    (18) factor -> . factor TIMES operand
    (19) factor -> . factor DIV operand
    (20) factor -> . operand
    (21) operand -> . VARIABLE
    (22) operand -> . NUMBER

    VARIABLE        shift and go to state 14
    NUMBER          shift and go to state 15

    cond                           shift and go to state 9
    atom_cond                      shift and go to state 10
    expr                           shift and go to state 11
    factor                         shift and go to state 12
    operand                        shift and go to state 13

state 7

    (3) if_seq -> if_statement ELSE if_seq .

    $end            reduce using rule 3 (if_seq -> if_statement ELSE if_seq .)


state 8

    (4) if_seq -> if_statement ELSE LBRACK . transitions RBRACK
    (12) transitions -> . transition transitions
    (13) transitions -> .
    (14) transition -> . VARIABLE ASSIGN expr SEMI

    RBRACK          reduce using rule 13 (transitions -> .)
    VARIABLE        shift and go to state 18

    transitions                    shift and go to state 16
    transition                     shift and go to state 17

state 9

    (5) if_statement -> IF LPAREN cond . RPAREN LBRACK transitions RBRACK

    RPAREN          shift and go to state 19


state 10

    (6) cond -> atom_cond .

    RPAREN          reduce using rule 6 (cond -> atom_cond .)


state 11

    (7) atom_cond -> expr . EQ expr
    (8) atom_cond -> expr . GT expr
    (9) atom_cond -> expr . LT expr
    (10) atom_cond -> expr . GE expr
    (11) atom_cond -> expr . LE expr

    EQ              shift and go to state 20
    GT              shift and go to state 21
    LT              shift and go to state 22
    GE              shift and go to state 23
    LE              shift and go to state 24


state 12

    (15) expr -> factor . PLUS expr
    (16) expr -> factor . MINUS expr
    (17) expr -> factor .
    (18) factor -> factor . TIMES operand
    (19) factor -> factor . DIV operand

    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    EQ              reduce using rule 17 (expr -> factor .)
    GT              reduce using rule 17 (expr -> factor .)
    LT              reduce using rule 17 (expr -> factor .)
    GE              reduce using rule 17 (expr -> factor .)
    LE              reduce using rule 17 (expr -> factor .)
    RPAREN          reduce using rule 17 (expr -> factor .)
    SEMI            reduce using rule 17 (expr -> factor .)
    TIMES           shift and go to state 27
    DIV             shift and go to state 28


state 13

    (20) factor -> operand .

    PLUS            reduce using rule 20 (factor -> operand .)
    MINUS           reduce using rule 20 (factor -> operand .)
    TIMES           reduce using rule 20 (factor -> operand .)
    DIV             reduce using rule 20 (factor -> operand .)
    EQ              reduce using rule 20 (factor -> operand .)
    GT              reduce using rule 20 (factor -> operand .)
    LT              reduce using rule 20 (factor -> operand .)
    GE              reduce using rule 20 (factor -> operand .)
    LE              reduce using rule 20 (factor -> operand .)
    RPAREN          reduce using rule 20 (factor -> operand .)
    SEMI            reduce using rule 20 (factor -> operand .)


state 14

    (21) operand -> VARIABLE .

    PLUS            reduce using rule 21 (operand -> VARIABLE .)
    MINUS           reduce using rule 21 (operand -> VARIABLE .)
    TIMES           reduce using rule 21 (operand -> VARIABLE .)
    DIV             reduce using rule 21 (operand -> VARIABLE .)
    EQ              reduce using rule 21 (operand -> VARIABLE .)
    GT              reduce using rule 21 (operand -> VARIABLE .)
    LT              reduce using rule 21 (operand -> VARIABLE .)
    GE              reduce using rule 21 (operand -> VARIABLE .)
    LE              reduce using rule 21 (operand -> VARIABLE .)
    RPAREN          reduce using rule 21 (operand -> VARIABLE .)
    SEMI            reduce using rule 21 (operand -> VARIABLE .)


state 15

    (22) operand -> NUMBER .

    PLUS            reduce using rule 22 (operand -> NUMBER .)
    MINUS           reduce using rule 22 (operand -> NUMBER .)
    TIMES           reduce using rule 22 (operand -> NUMBER .)
    DIV             reduce using rule 22 (operand -> NUMBER .)
    EQ              reduce using rule 22 (operand -> NUMBER .)
    GT              reduce using rule 22 (operand -> NUMBER .)
    LT              reduce using rule 22 (operand -> NUMBER .)
    GE              reduce using rule 22 (operand -> NUMBER .)
    LE              reduce using rule 22 (operand -> NUMBER .)
    RPAREN          reduce using rule 22 (operand -> NUMBER .)
    SEMI            reduce using rule 22 (operand -> NUMBER .)


state 16

    (4) if_seq -> if_statement ELSE LBRACK transitions . RBRACK

    RBRACK          shift and go to state 29


state 17

    (12) transitions -> transition . transitions
    (12) transitions -> . transition transitions
    (13) transitions -> .
    (14) transition -> . VARIABLE ASSIGN expr SEMI

    RBRACK          reduce using rule 13 (transitions -> .)
    VARIABLE        shift and go to state 18

    transition                     shift and go to state 17
    transitions                    shift and go to state 30

state 18

    (14) transition -> VARIABLE . ASSIGN expr SEMI

    ASSIGN          shift and go to state 31


state 19

    (5) if_statement -> IF LPAREN cond RPAREN . LBRACK transitions RBRACK

    LBRACK          shift and go to state 32


state 20

    (7) atom_cond -> expr EQ . expr
    (15) expr -> . factor PLUS expr
    (16) expr -> . factor MINUS expr
    (17) expr -> . factor
    (18) factor -> . factor TIMES operand
    (19) factor -> . factor DIV operand
    (20) factor -> . operand
    (21) operand -> . VARIABLE
    (22) operand -> . NUMBER

    VARIABLE        shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 33
    factor                         shift and go to state 12
    operand                        shift and go to state 13

state 21

    (8) atom_cond -> expr GT . expr
    (15) expr -> . factor PLUS expr
    (16) expr -> . factor MINUS expr
    (17) expr -> . factor
    (18) factor -> . factor TIMES operand
    (19) factor -> . factor DIV operand
    (20) factor -> . operand
    (21) operand -> . VARIABLE
    (22) operand -> . NUMBER

    VARIABLE        shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 34
    factor                         shift and go to state 12
    operand                        shift and go to state 13

state 22

    (9) atom_cond -> expr LT . expr
    (15) expr -> . factor PLUS expr
    (16) expr -> . factor MINUS expr
    (17) expr -> . factor
    (18) factor -> . factor TIMES operand
    (19) factor -> . factor DIV operand
    (20) factor -> . operand
    (21) operand -> . VARIABLE
    (22) operand -> . NUMBER

    VARIABLE        shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 35
    factor                         shift and go to state 12
    operand                        shift and go to state 13

state 23

    (10) atom_cond -> expr GE . expr
    (15) expr -> . factor PLUS expr
    (16) expr -> . factor MINUS expr
    (17) expr -> . factor
    (18) factor -> . factor TIMES operand
    (19) factor -> . factor DIV operand
    (20) factor -> . operand
    (21) operand -> . VARIABLE
    (22) operand -> . NUMBER

    VARIABLE        shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 36
    factor                         shift and go to state 12
    operand                        shift and go to state 13

state 24

    (11) atom_cond -> expr LE . expr
    (15) expr -> . factor PLUS expr
    (16) expr -> . factor MINUS expr
    (17) expr -> . factor
    (18) factor -> . factor TIMES operand
    (19) factor -> . factor DIV operand
    (20) factor -> . operand
    (21) operand -> . VARIABLE
    (22) operand -> . NUMBER

    VARIABLE        shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 37
    factor                         shift and go to state 12
    operand                        shift and go to state 13

state 25

    (15) expr -> factor PLUS . expr
    (15) expr -> . factor PLUS expr
    (16) expr -> . factor MINUS expr
    (17) expr -> . factor
    (18) factor -> . factor TIMES operand
    (19) factor -> . factor DIV operand
    (20) factor -> . operand
    (21) operand -> . VARIABLE
    (22) operand -> . NUMBER

    VARIABLE        shift and go to state 14
    NUMBER          shift and go to state 15

    factor                         shift and go to state 12
    expr                           shift and go to state 38
    operand                        shift and go to state 13

state 26

    (16) expr -> factor MINUS . expr
    (15) expr -> . factor PLUS expr
    (16) expr -> . factor MINUS expr
    (17) expr -> . factor
    (18) factor -> . factor TIMES operand
    (19) factor -> . factor DIV operand
    (20) factor -> . operand
    (21) operand -> . VARIABLE
    (22) operand -> . NUMBER

    VARIABLE        shift and go to state 14
    NUMBER          shift and go to state 15

    factor                         shift and go to state 12
    expr                           shift and go to state 39
    operand                        shift and go to state 13

state 27

    (18) factor -> factor TIMES . operand
    (21) operand -> . VARIABLE
    (22) operand -> . NUMBER

    VARIABLE        shift and go to state 14
    NUMBER          shift and go to state 15

    operand                        shift and go to state 40

state 28

    (19) factor -> factor DIV . operand
    (21) operand -> . VARIABLE
    (22) operand -> . NUMBER

    VARIABLE        shift and go to state 14
    NUMBER          shift and go to state 15

    operand                        shift and go to state 41

state 29

    (4) if_seq -> if_statement ELSE LBRACK transitions RBRACK .

    $end            reduce using rule 4 (if_seq -> if_statement ELSE LBRACK transitions RBRACK .)


state 30

    (12) transitions -> transition transitions .

    RBRACK          reduce using rule 12 (transitions -> transition transitions .)


state 31

    (14) transition -> VARIABLE ASSIGN . expr SEMI
    (15) expr -> . factor PLUS expr
    (16) expr -> . factor MINUS expr
    (17) expr -> . factor
    (18) factor -> . factor TIMES operand
    (19) factor -> . factor DIV operand
    (20) factor -> . operand
    (21) operand -> . VARIABLE
    (22) operand -> . NUMBER

    VARIABLE        shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 42
    factor                         shift and go to state 12
    operand                        shift and go to state 13

state 32

    (5) if_statement -> IF LPAREN cond RPAREN LBRACK . transitions RBRACK
    (12) transitions -> . transition transitions
    (13) transitions -> .
    (14) transition -> . VARIABLE ASSIGN expr SEMI

    RBRACK          reduce using rule 13 (transitions -> .)
    VARIABLE        shift and go to state 18

    transitions                    shift and go to state 43
    transition                     shift and go to state 17

state 33

    (7) atom_cond -> expr EQ expr .

    RPAREN          reduce using rule 7 (atom_cond -> expr EQ expr .)


state 34

    (8) atom_cond -> expr GT expr .

    RPAREN          reduce using rule 8 (atom_cond -> expr GT expr .)


state 35

    (9) atom_cond -> expr LT expr .

    RPAREN          reduce using rule 9 (atom_cond -> expr LT expr .)


state 36

    (10) atom_cond -> expr GE expr .

    RPAREN          reduce using rule 10 (atom_cond -> expr GE expr .)


state 37

    (11) atom_cond -> expr LE expr .

    RPAREN          reduce using rule 11 (atom_cond -> expr LE expr .)


state 38

    (15) expr -> factor PLUS expr .

    EQ              reduce using rule 15 (expr -> factor PLUS expr .)
    GT              reduce using rule 15 (expr -> factor PLUS expr .)
    LT              reduce using rule 15 (expr -> factor PLUS expr .)
    GE              reduce using rule 15 (expr -> factor PLUS expr .)
    LE              reduce using rule 15 (expr -> factor PLUS expr .)
    RPAREN          reduce using rule 15 (expr -> factor PLUS expr .)
    SEMI            reduce using rule 15 (expr -> factor PLUS expr .)


state 39

    (16) expr -> factor MINUS expr .

    EQ              reduce using rule 16 (expr -> factor MINUS expr .)
    GT              reduce using rule 16 (expr -> factor MINUS expr .)
    LT              reduce using rule 16 (expr -> factor MINUS expr .)
    GE              reduce using rule 16 (expr -> factor MINUS expr .)
    LE              reduce using rule 16 (expr -> factor MINUS expr .)
    RPAREN          reduce using rule 16 (expr -> factor MINUS expr .)
    SEMI            reduce using rule 16 (expr -> factor MINUS expr .)


state 40

    (18) factor -> factor TIMES operand .

    PLUS            reduce using rule 18 (factor -> factor TIMES operand .)
    MINUS           reduce using rule 18 (factor -> factor TIMES operand .)
    TIMES           reduce using rule 18 (factor -> factor TIMES operand .)
    DIV             reduce using rule 18 (factor -> factor TIMES operand .)
    EQ              reduce using rule 18 (factor -> factor TIMES operand .)
    GT              reduce using rule 18 (factor -> factor TIMES operand .)
    LT              reduce using rule 18 (factor -> factor TIMES operand .)
    GE              reduce using rule 18 (factor -> factor TIMES operand .)
    LE              reduce using rule 18 (factor -> factor TIMES operand .)
    RPAREN          reduce using rule 18 (factor -> factor TIMES operand .)
    SEMI            reduce using rule 18 (factor -> factor TIMES operand .)


state 41

    (19) factor -> factor DIV operand .

    PLUS            reduce using rule 19 (factor -> factor DIV operand .)
    MINUS           reduce using rule 19 (factor -> factor DIV operand .)
    TIMES           reduce using rule 19 (factor -> factor DIV operand .)
    DIV             reduce using rule 19 (factor -> factor DIV operand .)
    EQ              reduce using rule 19 (factor -> factor DIV operand .)
    GT              reduce using rule 19 (factor -> factor DIV operand .)
    LT              reduce using rule 19 (factor -> factor DIV operand .)
    GE              reduce using rule 19 (factor -> factor DIV operand .)
    LE              reduce using rule 19 (factor -> factor DIV operand .)
    RPAREN          reduce using rule 19 (factor -> factor DIV operand .)
    SEMI            reduce using rule 19 (factor -> factor DIV operand .)


state 42

    (14) transition -> VARIABLE ASSIGN expr . SEMI

    SEMI            shift and go to state 44


state 43

    (5) if_statement -> IF LPAREN cond RPAREN LBRACK transitions . RBRACK

    RBRACK          shift and go to state 45


state 44

    (14) transition -> VARIABLE ASSIGN expr SEMI .

    VARIABLE        reduce using rule 14 (transition -> VARIABLE ASSIGN expr SEMI .)
    RBRACK          reduce using rule 14 (transition -> VARIABLE ASSIGN expr SEMI .)


state 45

    (5) if_statement -> IF LPAREN cond RPAREN LBRACK transitions RBRACK .

    ELSE            reduce using rule 5 (if_statement -> IF LPAREN cond RPAREN LBRACK transitions RBRACK .)
    $end            reduce using rule 5 (if_statement -> IF LPAREN cond RPAREN LBRACK transitions RBRACK .)

