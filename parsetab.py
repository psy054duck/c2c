
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN DIV ELSE EQ GE GT IF LBRACK LE LPAREN LT MINUS NUMBER PLUS RBRACK RPAREN SEMI TIMES VARIABLErecurrence : if_seqif_seq : if_statementif_seq : if_statement ELSE if_seqif_seq : if_statement ELSE LBRACK transitions RBRACKif_statement : IF LPAREN cond RPAREN LBRACK transitions RBRACKcond : atom_condatom_cond : expr EQ expratom_cond : expr GT expratom_cond : expr LT expratom_cond : expr GE expratom_cond : expr LE exprtransitions : transition transitionstransitions : transition : VARIABLE ASSIGN expr SEMIexpr : factor PLUS exprexpr : factor MINUS exprexpr : factorfactor : factor TIMES operandfactor : factor DIV operandfactor : operandoperand : VARIABLEoperand : NUMBER'
    
_lr_action_items = {'IF':([0,5,],[4,4,]),'$end':([1,2,3,7,29,45,],[0,-1,-2,-3,-4,-5,]),'ELSE':([3,45,],[5,-5,]),'LPAREN':([4,],[6,]),'LBRACK':([5,19,],[8,32,]),'VARIABLE':([6,8,17,20,21,22,23,24,25,26,27,28,31,32,44,],[14,18,18,14,14,14,14,14,14,14,14,14,14,18,-14,]),'NUMBER':([6,20,21,22,23,24,25,26,27,28,31,],[15,15,15,15,15,15,15,15,15,15,15,]),'RBRACK':([8,16,17,30,32,43,44,],[-13,29,-13,-12,-13,45,-14,]),'RPAREN':([9,10,12,13,14,15,33,34,35,36,37,38,39,40,41,],[19,-6,-17,-20,-21,-22,-7,-8,-9,-10,-11,-15,-16,-18,-19,]),'EQ':([11,12,13,14,15,38,39,40,41,],[20,-17,-20,-21,-22,-15,-16,-18,-19,]),'GT':([11,12,13,14,15,38,39,40,41,],[21,-17,-20,-21,-22,-15,-16,-18,-19,]),'LT':([11,12,13,14,15,38,39,40,41,],[22,-17,-20,-21,-22,-15,-16,-18,-19,]),'GE':([11,12,13,14,15,38,39,40,41,],[23,-17,-20,-21,-22,-15,-16,-18,-19,]),'LE':([11,12,13,14,15,38,39,40,41,],[24,-17,-20,-21,-22,-15,-16,-18,-19,]),'PLUS':([12,13,14,15,40,41,],[25,-20,-21,-22,-18,-19,]),'MINUS':([12,13,14,15,40,41,],[26,-20,-21,-22,-18,-19,]),'SEMI':([12,13,14,15,38,39,40,41,42,],[-17,-20,-21,-22,-15,-16,-18,-19,44,]),'TIMES':([12,13,14,15,40,41,],[27,-20,-21,-22,-18,-19,]),'DIV':([12,13,14,15,40,41,],[28,-20,-21,-22,-18,-19,]),'ASSIGN':([18,],[31,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'recurrence':([0,],[1,]),'if_seq':([0,5,],[2,7,]),'if_statement':([0,5,],[3,3,]),'cond':([6,],[9,]),'atom_cond':([6,],[10,]),'expr':([6,20,21,22,23,24,25,26,31,],[11,33,34,35,36,37,38,39,42,]),'factor':([6,20,21,22,23,24,25,26,31,],[12,12,12,12,12,12,12,12,12,]),'operand':([6,20,21,22,23,24,25,26,27,28,31,],[13,13,13,13,13,13,13,13,40,41,13,]),'transitions':([8,17,32,],[16,30,43,]),'transition':([8,17,32,],[17,17,17,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> recurrence","S'",1,None,None,None),
  ('recurrence -> if_seq','recurrence',1,'p_recurrence','parser.py',7),
  ('if_seq -> if_statement','if_seq',1,'p_if_seq_1','parser.py',11),
  ('if_seq -> if_statement ELSE if_seq','if_seq',3,'p_if_seq_2','parser.py',15),
  ('if_seq -> if_statement ELSE LBRACK transitions RBRACK','if_seq',5,'p_if_seq_3','parser.py',19),
  ('if_statement -> IF LPAREN cond RPAREN LBRACK transitions RBRACK','if_statement',7,'p_if_statement','parser.py',23),
  ('cond -> atom_cond','cond',1,'p_cond_1','parser.py',27),
  ('atom_cond -> expr EQ expr','atom_cond',3,'p_atom_cond_1','parser.py',31),
  ('atom_cond -> expr GT expr','atom_cond',3,'p_atom_cond_2','parser.py',35),
  ('atom_cond -> expr LT expr','atom_cond',3,'p_atom_cond_3','parser.py',39),
  ('atom_cond -> expr GE expr','atom_cond',3,'p_atom_cond_4','parser.py',43),
  ('atom_cond -> expr LE expr','atom_cond',3,'p_atom_cond_5','parser.py',47),
  ('transitions -> transition transitions','transitions',2,'p_transitions_1','parser.py',51),
  ('transitions -> <empty>','transitions',0,'p_transitions_2','parser.py',55),
  ('transition -> VARIABLE ASSIGN expr SEMI','transition',4,'p_transition','parser.py',59),
  ('expr -> factor PLUS expr','expr',3,'p_expr_1','parser.py',63),
  ('expr -> factor MINUS expr','expr',3,'p_expr_2','parser.py',67),
  ('expr -> factor','expr',1,'p_expr_3','parser.py',71),
  ('factor -> factor TIMES operand','factor',3,'p_factor_1','parser.py',75),
  ('factor -> factor DIV operand','factor',3,'p_factor_2','parser.py',79),
  ('factor -> operand','factor',1,'p_factor_3','parser.py',83),
  ('operand -> VARIABLE','operand',1,'p_operand_1','parser.py',87),
  ('operand -> NUMBER','operand',1,'p_operand_2','parser.py',91),
]
